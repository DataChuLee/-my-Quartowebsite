---
title: Lecture 17
date: '2023-01-16'
description: '연산자 만들기, return 함수'
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

### 차례 

-   연산자 만들기 : %anything%

-   return 함수

### 연산자 만들기

`%anything%`

-   이 자체가 연산자 역할을 한다.

-   기존의 연산자 : %\*% (행렬 곱), %/%(몫), %o%(outer)

**신뢰구간 예시**

```{r}
'%+-%' <- function(x, margin){
  x + c(-1,1)*margin
}

100 %+-% (1.96)

100 %+-% (1.96*2)

100 %+-% (1.96*10)
```

### return 함수 

-   **return( ) 함수를 왜 사용해야 하는지, return( ) 함수 유무에 따라 어떤 차이가 있는지 아래에서 설명하겠다.**

**설명을 위해 숫자 2개 곱하기 함수를 만들고 return 함수 유무에 따른 차이를 비교해 보겠다. return( ) 사용 유무의 차이는 결과값을 변수에 저장해 보면 알 수 있으며, 아래에서는 단순 출력과 저장 후 출력의 차이를 비교해 설명할 것이다.**

### return( )함수를 사용한 정상적인 사용자 함수

```{r}
# 함수 생성 
multi_two_return <- function(x,y){
  res <- x*y
  return(res)
}

# 함수 호출 
multi_two_return(5,9)

# 변수 저장 후 출력
# 결과를 보면 위에서와 같이 동일하게 45 라는 계산값이 정상 출력되는 것을 볼 수 있다. 
res1 <- multi_two_return(5,9)
res1
```

### return() 함수를 사용하지 않은 함수

```{r}
multi_two_cat <- function(x,y){
  res <- x*y
  cat(res)
}

# 함수 호출
multi_two_cat(5,9)

# 변수 저장 후 출력
# 결과값을 res2에 저장하는 코드를 실행하였더니 변수를 호출하지 않았는데도 45라는 결과값이 출력되는 것을 볼 수 있다.
res2 <- multi_two_cat(5,9)

# res2 변수를 호출해 보니 NULL이 출력되었다. 
res2
```

### 결과 비교

위 결과에서 함수를 호출하여 **단순 출력했을 경우** 45로 결과값이 동일하게 출력되는 것을 볼 수 있었으나, 변수 저장 후 출력 결과에서는 `return()과 cat()` 사용에 따라 차이가 있는 것을 볼 수 있다.

`return( )`으로 만든 함수는 변수를 따로 출력하기 전에 값이 출력되지 않았다.

`cat( )`으로 만든 함수는 저장해도 함수를 호출한 것처럼 바로 결과값이 출력된다.

이는 `cat( )`함수는 단순히 결과값을 출력할 뿐 값을 함수 인자에 반환해주지 않기 때문이다.

따라서 함수에서 계산된 값을 반환하여 변수에 저장하기 위해서는 `return( )`함수가 반드시 필요하다!
