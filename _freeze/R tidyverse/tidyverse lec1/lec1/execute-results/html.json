{
  "hash": "6bbecca8c42b7358c0a5f0e92fc91730",
  "result": {
    "markdown": "---\ntitle: R tidyverse lec1   \ndate: '2023-01-20'\ndescription: 'tidyverse intro & 맛보기'\ncategory: 'dplyr'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n### Tidyverse에 대하여\n\n-   여러 데이터 분석에 유용한 패키지들의 모음집\n\n-   공식적인 tidyverse의 시작은 2016년이다.\n\n    -   이전부터 각각 구성원들이 따로 사용되고 있었다.\n\n    -   ggplot2 패키지는 2005년에 만들어졌다.\n\n### 핵심 구성 요소\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('tidyverse')\nlibrary(tidyverse)\n```\n:::\n\n\n![](images/paste-9FE3AD1F.png)\n\n-   ggplot2 : Data visualization\n\n-   dplyr : data wrangling\n\n-   readr : reading data\n\n-   tibble : modern data frames\n\n-   stringr : string manipulation\n\n-   forcats : dealing with factors\n\n-   tidyr : data tidying\n\n-   purrr : functional programming\n\n### 데이터 맛보기\n\n서울시 생활이동 데이터\n\n-   특정 시점에 서울 안에서 이동, 서울 외부에서 서울로 오고 간 이동\\\n    한 데이터\n\n-   통근, 통학, 쇼핑, 여가 등 서울시의 행정수요를 유발하는 모든 이동을 의미한다.\n\n-   2021 7월 (8시) 이동 데이터\n\n-   자치구 코드 정보\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nmoving_data <- read_csv('seoul_moving_202107_09_hr.csv')\nreference_data <- readxl:: read_excel('reference.xlsx') \n```\n:::\n\n\n### 데이터 파일 불러오기\n\n-   `.csv` 파일의 경우 `read_csv()` 함수를 사용\n\n-   `.xlsx 파일의 경우 read_xlsx() 함수를 사용`\n\n    -   차이점은? --\\> 파일 형태의 차이에 있다.\n\n    -   `::` 의 의미 --\\> 로딩 없이 패키지 안에 있는 함수를 사용하고 싶을 때 활용한다.\\\n        Ex) readxl 이라는 패키지 안에 함수 read_excel ( )을 로딩없이 사용하고 싶다.\\\n        그럴 때, `readxl :: read_excel() 와 같이 사용하면 된다.`\n\n### \n\n### 데이터와 친해지기\n\n1.  **기초 탐색(R 내장함수)**\n\n-   dim( )\n\n-   head( )\n\n-   tail( )\n\n2.  **tidyverse**\n\n-   glimpse( )\n\n### 데이터 변수 이름 바꾸기\n\n변수 이름 설정 - 한글 코딩은 싫어요!!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reference_data \norigin_name_reference <- names(reference_data)\norigin_name_reference # 한글로 된 변수이름\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"시도\"      \"시군구\"    \"name\"      \"full name\"\n```\n:::\n\n```{.r .cell-code}\n# 한글 변수들을 영어 변수로 바꿔준다. \n# janitor 패키지의 clean_names() 함수를 사용! \nreference_data %>% \n  janitor::clean_names() %>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sido\"      \"sigungu\"   \"name\"      \"full_name\"\n```\n:::\n\n```{.r .cell-code}\n# moving_data\norigin_name_moving <- names(moving_data)\norigin_name_moving\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"대상연월\"           \"요일\"               \"도착시간\"          \n [4] \"출발 시군구 코드\"   \"도착 시군구 코드\"   \"성별\"              \n [7] \"나이\"               \"이동유형\"           \"평균 이동 시간(분)\"\n[10] \"이동인구(합)\"      \n```\n:::\n\n```{.r .cell-code}\nmoving_data %>% \n  janitor::clean_names() %>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"daesang_yeon_wol\"            \"yoil\"                       \n [3] \"dochagsigan\"                 \"chulbal_sigungu_kodeu\"      \n [5] \"dochag_sigungu_kodeu\"        \"seongbyeol\"                 \n [7] \"nai\"                         \"idong_yuhyeong\"             \n [9] \"pyeong_gyun_idong_sigan_bun\" \"idong_ingu_hab\"             \n```\n:::\n:::\n\n\n### `dplyr` 패키지(기본 동사 학습)\n\n-   Single table 동사들\n\n1.  행(row) 관련 동사들\n\n    -   `distinct( )`\n\n    -   `filter( )`\n\n    -   `slice( )`\n\n2.  열(column) 관련 동사들\n\n    -   `select( )`\n\n    -   `rename( )`\n\n    -   `mutate( )`\n\n    -   `relocate( )`\n\n### 시도(sido) 단위는 몇 개인가?\n\n중복 없는 표본들을 걸러준다.\n\n-   `distinct( )`\n\n    -   `.keep_all( ) = TRUE` 설정으로 딸려있는 데이터 보관하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreference_data <- reference_data %>% \n                      janitor::clean_names() \n\n# sido 변수안에 있는 data값들을 분리해서 보여준다.\nreference_data %>% \n  distinct(sido) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 1\n    sido\n   <dbl>\n 1 11000\n 2 21000\n 3 22000\n 4 23000\n 5 24000\n 6 25000\n 7 26000\n 8 29000\n 9 31000\n10 32000\n11 33000\n12 34000\n13 35000\n14 36000\n15 37000\n16 38000\n17 39000\n```\n:::\n\n```{.r .cell-code}\n# 분리한 값들을 count\nreference_data %>% \n  distinct(sido) %>% \n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1    17\n```\n:::\n\n```{.r .cell-code}\n# '.keep_all = TRUE'의 설정으로 딸려있는 데이터도 같이 보여준다\nreference_data %>% \n  distinct(sido, .keep_all = TRUE) %>% \n  dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17  4\n```\n:::\n:::\n\n\n### 원하는 행들을 걸러(filter)내는 방법\n\n**사용 가능한 함수들**\n\n-   연산자들\n\n    -   `==, > , >=, &, |, !`\n\n-   `유용한` 함수들\n\n    -   `is.na( )`\n\n    -   `between( ), near( )`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoving_data %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,263,554\nColumns: 10\n$ 대상연월             <dbl> 202107, 202107, 202107, 202107, 202107, 202107, 2…\n$ 요일                 <chr> \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"…\n$ 도착시간             <chr> \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"…\n$ `출발 시군구 코드`   <dbl> 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ `도착 시군구 코드`   <dbl> 11010, 11010, 11010, 11010, 11010, 11010, 11010, …\n$ 성별                 <chr> \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\",…\n$ 나이                 <chr> \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", \"15\", \"…\n$ 이동유형             <chr> \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", \"EE\", \"…\n$ `평균 이동 시간(분)` <dbl> 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30, 60, 1…\n$ `이동인구(합)`       <chr> \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"6.05\", …\n```\n:::\n\n```{.r .cell-code}\n# 일요일에 운전을 한 여자\nmoving_data <- moving_data %>% \n  janitor::clean_names() %>% \n  filter(yoil == '일',\n         seongbyeol == 'F') \n\n# 출발코드가 11010 이면서 도착코드가 11010인 data\nmoving_data %>% \n  filter(chulbal_sigungu_kodeu == 11010,\n         dochag_sigungu_kodeu == 11010)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 117 × 10\n   daesang…¹ yoil  docha…² chulb…³ docha…⁴ seong…⁵ nai   idong…⁶ pyeon…⁷ idong…⁸\n       <dbl> <chr> <chr>     <dbl>   <dbl> <chr>   <chr> <chr>     <dbl> <chr>  \n 1    202107 일    09        11010   11010 F       00    HE           10 55.41  \n 2    202107 일    09        11010   11010 F       10    HW           10 5.9    \n 3    202107 일    09        11010   11010 F       10    HE           10 41.5   \n 4    202107 일    09        11010   11010 F       10    EE           20 11.98  \n 5    202107 일    09        11010   11010 F       10    HH           20 5.93   \n 6    202107 일    09        11010   11010 F       15    EH           10 6.05   \n 7    202107 일    09        11010   11010 F       15    WH           10 4.04   \n 8    202107 일    09        11010   11010 F       15    EE           10 20.39  \n 9    202107 일    09        11010   11010 F       15    HE           10 76.78  \n10    202107 일    09        11010   11010 F       15    HW           10 48.43  \n# … with 107 more rows, and abbreviated variable names ¹​daesang_yeon_wol,\n#   ²​dochagsigan, ³​chulbal_sigungu_kodeu, ⁴​dochag_sigungu_kodeu, ⁵​seongbyeol,\n#   ⁶​idong_yuhyeong, ⁷​pyeong_gyun_idong_sigan_bun, ⁸​idong_ingu_hab\n```\n:::\n\n```{.r .cell-code}\n# 나이가 20~40대인 data\nmoving_data %>% \n  filter(between(nai, 20,40))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25,761 × 10\n   daesang…¹ yoil  docha…² chulb…³ docha…⁴ seong…⁵ nai   idong…⁶ pyeon…⁷ idong…⁸\n       <dbl> <chr> <chr>     <dbl>   <dbl> <chr>   <chr> <chr>     <dbl> <chr>  \n 1    202107 일    09        11010   11010 F       20    WH           30 10.83  \n 2    202107 일    09        11010   11010 F       20    EH           60 8.68   \n 3    202107 일    09        11010   11010 F       20    EW           10 *      \n 4    202107 일    09        11010   11010 F       20    WW           70 *      \n 5    202107 일    09        11010   11010 F       20    WE           50 *      \n 6    202107 일    09        11010   11010 F       20    HE           10 100.14 \n 7    202107 일    09        11010   11010 F       20    HH           10 8.67   \n 8    202107 일    09        11010   11010 F       20    HW           10 143.46 \n 9    202107 일    09        11010   11010 F       20    EE           10 43.69  \n10    202107 일    09        11010   11010 F       25    HH           20 16.16  \n# … with 25,751 more rows, and abbreviated variable names ¹​daesang_yeon_wol,\n#   ²​dochagsigan, ³​chulbal_sigungu_kodeu, ⁴​dochag_sigungu_kodeu, ⁵​seongbyeol,\n#   ⁶​idong_yuhyeong, ⁷​pyeong_gyun_idong_sigan_bun, ⁸​idong_ingu_hab\n```\n:::\n:::\n\n\n### 원하는 행들을 잘라내는 (slice)방법\n\n기본 함수인 `head()` 의 확장버전\n\n-   기본적으로 인덱싱을 제공\n\n    -   맨 마지막 인덱스: `n()`\n\n-   유용한 함수들\n\n    -   `slice_max( ),slice_min( ),slice_sample(),slice_head(),slice_tail()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 15~20번째 행들 추출\nmoving_data %>% \n  slice(15:20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  daesang_…¹ yoil  docha…² chulb…³ docha…⁴ seong…⁵ nai   idong…⁶ pyeon…⁷ idong…⁸\n       <dbl> <chr> <chr>     <dbl>   <dbl> <chr>   <chr> <chr>     <dbl> <chr>  \n1     202107 일    09        11010   11010 F       20    WE           50 *      \n2     202107 일    09        11010   11010 F       20    HE           10 100.14 \n3     202107 일    09        11010   11010 F       20    HH           10 8.67   \n4     202107 일    09        11010   11010 F       20    HW           10 143.46 \n5     202107 일    09        11010   11010 F       20    EE           10 43.69  \n6     202107 일    09        11010   11010 F       25    HH           20 16.16  \n# … with abbreviated variable names ¹​daesang_yeon_wol, ²​dochagsigan,\n#   ³​chulbal_sigungu_kodeu, ⁴​dochag_sigungu_kodeu, ⁵​seongbyeol,\n#   ⁶​idong_yuhyeong, ⁷​pyeong_gyun_idong_sigan_bun, ⁸​idong_ingu_hab\n```\n:::\n\n```{.r .cell-code}\n# 마지막 6개의 행들 추출 \nmoving_data %>% \n  slice_tail(n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  daesang_…¹ yoil  docha…² chulb…³ docha…⁴ seong…⁵ nai   idong…⁶ pyeon…⁷ idong…⁸\n       <dbl> <chr> <chr>     <dbl>   <dbl> <chr>   <chr> <chr>     <dbl> <chr>  \n1     202107 일    09        39000   11240 F       40    EW           50 3.44   \n2     202107 일    09        39000   11240 F       40    EE           60 3.42   \n3     202107 일    09        39000   11240 F       40    EH           60 3.43   \n4     202107 일    09        39000   11240 F       45    EH           80 3.3    \n5     202107 일    09        39000   11240 F       50    EH           30 3.12   \n6     202107 일    09        39000   11240 F       55    EE           80 3.27   \n# … with abbreviated variable names ¹​daesang_yeon_wol, ²​dochagsigan,\n#   ³​chulbal_sigungu_kodeu, ⁴​dochag_sigungu_kodeu, ⁵​seongbyeol,\n#   ⁶​idong_yuhyeong, ⁷​pyeong_gyun_idong_sigan_bun, ⁸​idong_ingu_hab\n```\n:::\n\n```{.r .cell-code}\n# nai 변수가 숫자형이 아닌 문자형 데이터이므로, 데이터 변환 후\n# nai 변수만 따로 가져와서, 나이 TOP 5 추출하기 \nmoving_data %>% \n  mutate(nai = as.numeric(nai)) %>%\n  distinct(nai) %>% \n  slice_max(nai, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n    nai\n  <dbl>\n1    80\n2    75\n3    70\n4    65\n5    60\n```\n:::\n:::\n\n\n### 내맘대로 행을 정렬(arrange) 하는 방법\n\n-   정렬 기준 우선 순위 순서대로 설정\n\n-   내림차순 : `desc()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoving_data %>% \n  select(dochagsigan,\n         pyeong_gyun_idong_sigan_bun) %>% \n  arrange(dochagsigan, desc(pyeong_gyun_idong_sigan_bun))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 62,076 × 2\n   dochagsigan pyeong_gyun_idong_sigan_bun\n   <chr>                             <dbl>\n 1 09                                  600\n 2 09                                  580\n 3 09                                  550\n 4 09                                  490\n 5 09                                  470\n 6 09                                  470\n 7 09                                  470\n 8 09                                  460\n 9 09                                  460\n10 09                                  450\n# … with 62,066 more rows\n```\n:::\n:::\n\n\n### 원하는 열을 선택(select)하는 방법\n\n**사용할 수 있는 옵션들**\n\n-   사용가능 연산자들\n\n    -   `: , ! , & , | , c( )` 사용\n\n-   편리한 함수들\n\n    -   `everything( ), last_col( )`\n\n    -   `starts_with( ),ends_with( ),contains( )`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sido 변수를 1열에 배치해주고, 나머지는 순차적으로! \nreference_data %>% \n  select(sido, everything())  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 91 × 4\n    sido sigungu name     full_name          \n   <dbl>   <dbl> <chr>    <chr>              \n 1 11000   11010 종로구   서울특별시 종로구  \n 2 11000   11020 중구     서울특별시 중구    \n 3 11000   11030 용산구   서울특별시 용산구  \n 4 11000   11040 성동구   서울특별시 성동구  \n 5 11000   11050 광진구   서울특별시 광진구  \n 6 11000   11060 동대문구 서울특별시 동대문구\n 7 11000   11070 중랑구   서울특별시 중랑구  \n 8 11000   11080 성북구   서울특별시 성북구  \n 9 11000   11090 강북구   서울특별시 강북구  \n10 11000   11100 도봉구   서울특별시 도봉구  \n# … with 81 more rows\n```\n:::\n\n```{.r .cell-code}\n# name 변수와 last col인 full_name 변수를 가져와줘!\nreference_data %>% \n  select(name, last_col())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 91 × 2\n   name     full_name          \n   <chr>    <chr>              \n 1 종로구   서울특별시 종로구  \n 2 중구     서울특별시 중구    \n 3 용산구   서울특별시 용산구  \n 4 성동구   서울특별시 성동구  \n 5 광진구   서울특별시 광진구  \n 6 동대문구 서울특별시 동대문구\n 7 중랑구   서울특별시 중랑구  \n 8 성북구   서울특별시 성북구  \n 9 강북구   서울특별시 강북구  \n10 도봉구   서울특별시 도봉구  \n# … with 81 more rows\n```\n:::\n:::\n\n\n### 나만의 열을 생성(mutate)하는 방법\n\n-   **new = old 문법**\n\n`mutate(new = old_1 + old_2 …. + old_n)`\n\n-   유용한 옵션\n\n`.keep = c('all', 'used', 'unused', 'none' )`\n\n-   궁합 좋은 함수들(심화공부`)`\n\n    -   `case_when() , na_if(), coalesce(), if_else()`\n\n-   년도 정도만 뺴내오기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nmoving_data %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 62,076\nColumns: 10\n$ daesang_yeon_wol            <dbl> 202107, 202107, 202107, 202107, 202107, 20…\n$ yoil                        <chr> \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", …\n$ dochagsigan                 <chr> \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", …\n$ chulbal_sigungu_kodeu       <dbl> 11010, 11010, 11010, 11010, 11010, 11010, …\n$ dochag_sigungu_kodeu        <dbl> 11010, 11010, 11010, 11010, 11010, 11010, …\n$ seongbyeol                  <chr> \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F…\n$ nai                         <chr> \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", …\n$ idong_yuhyeong              <chr> \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", …\n$ pyeong_gyun_idong_sigan_bun <dbl> 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30…\n$ idong_ingu_hab              <chr> \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"…\n```\n:::\n\n```{.r .cell-code}\nmoving_data %<>% \n  mutate(year = str_sub(daesang_yeon_wol, 1,4),\n         year = as.integer(year)) %>% \n  select(year, everything()) \n```\n:::\n\n\n-   분(min)을 시간(hr)으로 변환\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoving_data %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 62,076\nColumns: 11\n$ year                        <int> 2021, 2021, 2021, 2021, 2021, 2021, 2021, …\n$ daesang_yeon_wol            <dbl> 202107, 202107, 202107, 202107, 202107, 20…\n$ yoil                        <chr> \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", \"일\", …\n$ dochagsigan                 <chr> \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", \"09\", …\n$ chulbal_sigungu_kodeu       <dbl> 11010, 11010, 11010, 11010, 11010, 11010, …\n$ dochag_sigungu_kodeu        <dbl> 11010, 11010, 11010, 11010, 11010, 11010, …\n$ seongbyeol                  <chr> \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F…\n$ nai                         <chr> \"00\", \"10\", \"10\", \"10\", \"10\", \"15\", \"15\", …\n$ idong_yuhyeong              <chr> \"HE\", \"HW\", \"HE\", \"EE\", \"HH\", \"EH\", \"WH\", …\n$ pyeong_gyun_idong_sigan_bun <dbl> 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 30…\n$ idong_ingu_hab              <chr> \"55.41\", \"5.9\", \"41.5\", \"11.98\", \"5.93\", \"…\n```\n:::\n\n```{.r .cell-code}\nmoving_data %>% \n  mutate(idong_sigan_hr = pyeong_gyun_idong_sigan_bun / 60) %>%\n  select(idong_sigan_hr, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 62,076 × 12\n   idong_sig…¹  year daesa…² yoil  docha…³ chulb…⁴ docha…⁵ seong…⁶ nai   idong…⁷\n         <dbl> <int>   <dbl> <chr> <chr>     <dbl>   <dbl> <chr>   <chr> <chr>  \n 1       0.167  2021  202107 일    09        11010   11010 F       00    HE     \n 2       0.167  2021  202107 일    09        11010   11010 F       10    HW     \n 3       0.167  2021  202107 일    09        11010   11010 F       10    HE     \n 4       0.333  2021  202107 일    09        11010   11010 F       10    EE     \n 5       0.333  2021  202107 일    09        11010   11010 F       10    HH     \n 6       0.167  2021  202107 일    09        11010   11010 F       15    EH     \n 7       0.167  2021  202107 일    09        11010   11010 F       15    WH     \n 8       0.167  2021  202107 일    09        11010   11010 F       15    EE     \n 9       0.167  2021  202107 일    09        11010   11010 F       15    HE     \n10       0.167  2021  202107 일    09        11010   11010 F       15    HW     \n# … with 62,066 more rows, 2 more variables: pyeong_gyun_idong_sigan_bun <dbl>,\n#   idong_ingu_hab <chr>, and abbreviated variable names ¹​idong_sigan_hr,\n#   ²​daesang_yeon_wol, ³​dochagsigan, ⁴​chulbal_sigungu_kodeu,\n#   ⁵​dochag_sigungu_kodeu, ⁶​seongbyeol, ⁷​idong_yuhyeong\n```\n:::\n:::\n\n\n-   시도 정보만 빼내오기(ex. 서울특별시, 부산광역시...)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreference_data %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 91\nColumns: 4\n$ sido      <dbl> 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 1100…\n$ sigungu   <dbl> 11010, 11020, 11030, 11040, 11050, 11060, 11070, 11080, 1109…\n$ name      <chr> \"종로구\", \"중구\", \"용산구\", \"성동구\", \"광진구\", \"동대문구\", …\n$ full_name <chr> \"서울특별시 종로구\", \"서울특별시 중구\", \"서울특별시 용산구\",…\n```\n:::\n\n```{.r .cell-code}\nreference_data %>% \n  mutate(sido_name =str_split_fixed(full_name,\n                                    pattern = \" \",2)[,1]) %>% \n  select(sido_name) %>% \n  distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 1\n   sido_name     \n   <chr>         \n 1 서울특별시    \n 2 부산광역시    \n 3 대구광역시    \n 4 인천광역시    \n 5 광주광역시    \n 6 대전광역시    \n 7 울산광역시    \n 8 세종특별자치시\n 9 경기도        \n10 강원도        \n11 충청북도      \n12 충청남도      \n13 전라북도      \n14 전라남도      \n15 경상북도      \n16 경상남도      \n17 제주특별자치도\n```\n:::\n:::\n\n\n### 열 이름 다시 정하기(rename)\n\n`df %>% rename(new = old)`\n\n`df %>% rename_with(function)`\n\n-   A을 a_new로 바꾸기\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# df %>% rename(a_new = A) \n```\n:::\n\n\n-   모든 열이름 대문자로 바꾸기\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# df %>% rename_with(toupper)\n```\n:::\n\n\n-   실습하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoving_data %>% \n  rename(avg_time_min= pyeong_gyun_idong_sigan_bun,\n         ppl_sum = idong_ingu_hab) %>% \n  select(avg_time_min, ppl_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 62,076 × 2\n   avg_time_min ppl_sum\n          <dbl> <chr>  \n 1           10 55.41  \n 2           10 5.9    \n 3           10 41.5   \n 4           20 11.98  \n 5           20 5.93   \n 6           10 6.05   \n 7           10 4.04   \n 8           10 20.39  \n 9           10 76.78  \n10           10 48.43  \n# … with 62,066 more rows\n```\n:::\n:::\n\n\n### 열의 위치를 재배치(relocate) 하는 방법\n\n-   열의 위치를 앞으로 땅김\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# df %>% relocate(col)\n# df %>% select(col, everything())\n```\n:::\n\n\n-   특정 위치로 옮길떄\n\n    -   `.before , .after` 옵션\n\n    -   `last_col()`함수\n\n-   변수 타입으로 정렬가능\n\n    -   `where(is.character)` 사용\n\n-   실습하기\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 이동 인구 합 앞으로\nmoving_data %>% \n  relocate(idong_ingu_hab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 62,076 × 11\n   idong_ing…¹  year daesa…² yoil  docha…³ chulb…⁴ docha…⁵ seong…⁶ nai   idong…⁷\n   <chr>       <int>   <dbl> <chr> <chr>     <dbl>   <dbl> <chr>   <chr> <chr>  \n 1 55.41        2021  202107 일    09        11010   11010 F       00    HE     \n 2 5.9          2021  202107 일    09        11010   11010 F       10    HW     \n 3 41.5         2021  202107 일    09        11010   11010 F       10    HE     \n 4 11.98        2021  202107 일    09        11010   11010 F       10    EE     \n 5 5.93         2021  202107 일    09        11010   11010 F       10    HH     \n 6 6.05         2021  202107 일    09        11010   11010 F       15    EH     \n 7 4.04         2021  202107 일    09        11010   11010 F       15    WH     \n 8 20.39        2021  202107 일    09        11010   11010 F       15    EE     \n 9 76.78        2021  202107 일    09        11010   11010 F       15    HE     \n10 48.43        2021  202107 일    09        11010   11010 F       15    HW     \n# … with 62,066 more rows, 1 more variable: pyeong_gyun_idong_sigan_bun <dbl>,\n#   and abbreviated variable names ¹​idong_ingu_hab, ²​daesang_yeon_wol,\n#   ³​dochagsigan, ⁴​chulbal_sigungu_kodeu, ⁵​dochag_sigungu_kodeu, ⁶​seongbyeol,\n#   ⁷​idong_yuhyeong\n```\n:::\n\n```{.r .cell-code}\n# 문자열 타입 앞으로\nmoving_data %>% \n  relocate(where(is.character))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 62,076 × 11\n   yoil  dochagsigan seong…¹ nai   idong…² idong…³  year daesa…⁴ chulb…⁵ docha…⁶\n   <chr> <chr>       <chr>   <chr> <chr>   <chr>   <int>   <dbl>   <dbl>   <dbl>\n 1 일    09          F       00    HE      55.41    2021  202107   11010   11010\n 2 일    09          F       10    HW      5.9      2021  202107   11010   11010\n 3 일    09          F       10    HE      41.5     2021  202107   11010   11010\n 4 일    09          F       10    EE      11.98    2021  202107   11010   11010\n 5 일    09          F       10    HH      5.93     2021  202107   11010   11010\n 6 일    09          F       15    EH      6.05     2021  202107   11010   11010\n 7 일    09          F       15    WH      4.04     2021  202107   11010   11010\n 8 일    09          F       15    EE      20.39    2021  202107   11010   11010\n 9 일    09          F       15    HE      76.78    2021  202107   11010   11010\n10 일    09          F       15    HW      48.43    2021  202107   11010   11010\n# … with 62,066 more rows, 1 more variable: pyeong_gyun_idong_sigan_bun <dbl>,\n#   and abbreviated variable names ¹​seongbyeol, ²​idong_yuhyeong,\n#   ³​idong_ingu_hab, ⁴​daesang_yeon_wol, ⁵​chulbal_sigungu_kodeu,\n#   ⁶​dochag_sigungu_kodeu\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}