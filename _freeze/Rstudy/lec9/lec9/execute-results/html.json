{
  "hash": "cf590e2c2bef7e95e0dbe4ec6c609af8",
  "result": {
    "markdown": "---\ntitle: Lecture 9\ndate: '2023-01-09'\ndescription: 'matrix(2)'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n### 차례 \n\n-   매트릭스 이름 짓기 : rownames( ), colnames( )\n\n-   매트릭스 pre - allocate\n\n1.  **매트릭스 이름 짓기 : rownames( ), colnames( )**\n\n-   rownames(x) \\<- 이름을 출력(c을 이용)\n\n-   colnames(x) \\<- 이름을 출력(c을 이용)\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:9,3,3,byrow = T) # 3행 3열, 행 부터 먼저 기입\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n:::\n\n```{.r .cell-code}\nrownames(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nrownames(a) <- c(\"r1\",\"r2\",\"r3\") # 행 이름 기입\nrownames(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"r1\" \"r2\" \"r3\"\n```\n:::\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   [,1] [,2] [,3]\nr1    1    2    3\nr2    4    5    6\nr3    7    8    9\n```\n:::\n\n```{.r .cell-code}\ncolnames(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\ncolnames(a) <- c(\"c1\",\"c2\",\"c3\") # 열 이름 기입 \ncolnames(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"c1\" \"c2\" \"c3\"\n```\n:::\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   c1 c2 c3\nr1  1  2  3\nr2  4  5  6\nr3  7  8  9\n```\n:::\n:::\n\n\n-   이름일 이용한 index\n\n\n::: {.cell}\n\n```{.r .cell-code}\na \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   c1 c2 c3\nr1  1  2  3\nr2  4  5  6\nr3  7  8  9\n```\n:::\n\n```{.r .cell-code}\na[1,1] # 1행 1열\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\na[2,3] # 2행 3열\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\na[\"r1\",\"c1\"] # 1행 1열인 부분을 행과 열의 이름을 이용한 index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\na[\"r2\",\"c3\"] # 2행 3열인 부분을 행과 열의 이름을 이용한 index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\na[c(1,2),] # 1,2행 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   c1 c2 c3\nr1  1  2  3\nr2  4  5  6\n```\n:::\n\n```{.r .cell-code}\na[c(\"r1\",\"r2\"),] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   c1 c2 c3\nr1  1  2  3\nr2  4  5  6\n```\n:::\n:::\n\n\n2.  **매트릭스 pre -allocate**\n\n사전에 공간을 만들어 놓은 후 값을 기입하는 것(속도 향상)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- matrix(0,3,3)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n[3,]    0    0    0\n```\n:::\n\n```{.r .cell-code}\ndiag(mat) <- 7 # 주대각 성분 위치에 7을 기입\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    7    0    0\n[2,]    0    7    0\n[3,]    0    0    7\n```\n:::\n\n```{.r .cell-code}\nmat[2,3] <- 77 # 2행 3열의 index에 77을 기입 \nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    7    0    0\n[2,]    0    7   77\n[3,]    0    0    7\n```\n:::\n:::\n\n\n-   matrix로 plot 그리기 Ex) $y = x^2$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\ny <- x^2\n\n# length(x) : x 의 원소 개수 \nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nmat <- matrix(c(x,y),length(x),2)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2]\n [1,]    1    1\n [2,]    2    4\n [3,]    3    9\n [4,]    4   16\n [5,]    5   25\n [6,]    6   36\n [7,]    7   49\n [8,]    8   64\n [9,]    9   81\n[10,]   10  100\n```\n:::\n\n```{.r .cell-code}\nplot(mat)\n```\n\n::: {.cell-output-display}\n![](lec9_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "lec9_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}