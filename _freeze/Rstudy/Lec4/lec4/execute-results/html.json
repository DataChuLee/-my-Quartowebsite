{
  "hash": "167c29d697e5a68598c5d14ff8ba6c9c",
  "result": {
    "markdown": "---\ntitle: Lecture 4\nsubtitle: 자료형/자료구조 변환\n---\n\n\n### 차례\n\n1.  **자료형 변환 : as.원하는 자료형**\n\n    -   as.character()\n\n    -   as.complex()\n\n    -   as.numberic() / as.double() / as.integer()\n\n    -   as.logical()\n\n2.  **자료구조 변환**\n\n    -   as.data.frame() / as.list() / as.vector()\n\n    -   as.factor()\n\n3.  **자료형 변환 : `as.원하는자료형`**\n\n    -   `as.character` : 문자형으로\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        x <- 1:5 # 숫자형 벡터 생성 \n        x\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] 1 2 3 4 5\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        str(x) # 구조 확인 \n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n         int [1:5] 1 2 3 4 5\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        x <- as.character(x) # 숫자형 벡터를 문자형으로 바꿔줘 \n        x\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] \"1\" \"2\" \"3\" \"4\" \"5\"\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        str(x) # 구조 확인 \n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n         chr [1:5] \"1\" \"2\" \"3\" \"4\" \"5\"\n        ```\n        :::\n        :::\n\n\n    -   `as.numeric / as.double` : 숫자형으로\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        x <- as.numeric(x)\n        x\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] 1 2 3 4 5\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        str(x)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n         num [1:5] 1 2 3 4 5\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        x <- as.complex(x)\n        x \n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] 1+0i 2+0i 3+0i 4+0i 5+0i\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        str(x)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n         cplx [1:5] 1+0i 2+0i 3+0i ...\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        x <- as.double(x)\n        x\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] 1 2 3 4 5\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        str(x)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n         num [1:5] 1 2 3 4 5\n        ```\n        :::\n        :::\n\n\n    -   `as.logical` : True or False 으로 전환\n\n        -   0 : False\n\n        -   0을 제외한 숫자 : True\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        x <- as.integer(x)\n        x\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] 1 2 3 4 5\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        str(x)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n         int [1:5] 1 2 3 4 5\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        x <- as.logical(x)\n        x\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] TRUE TRUE TRUE TRUE TRUE\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        str(x)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n         logi [1:5] TRUE TRUE TRUE TRUE TRUE\n        ```\n        :::\n        :::\n\n\n        -   **주의사항 logical --\\> integer**\n\n            -   True : 1\n\n            -   False : 0\n\n\n                ::: {.cell}\n                \n                ```{.r .cell-code}\n                x <- as.integer(x)\n                x\n                ```\n                \n                ::: {.cell-output .cell-output-stdout}\n                ```\n                [1] 1 1 1 1 1\n                ```\n                :::\n                \n                ```{.r .cell-code}\n                str(x)\n                ```\n                \n                ::: {.cell-output .cell-output-stdout}\n                ```\n                 int [1:5] 1 1 1 1 1\n                ```\n                :::\n                :::\n\n\n    -   **문자 --\\> 숫자 변환은 error**\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        y <- c(\"E\",\"D\",\"I\",\"Y\",\"A\")\n        y\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] \"E\" \"D\" \"I\" \"Y\" \"A\"\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        str(y)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n         chr [1:5] \"E\" \"D\" \"I\" \"Y\" \"A\"\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        y <- as.integer(y)\n        ```\n        \n        ::: {.cell-output .cell-output-stderr}\n        ```\n        Warning: NAs introduced by coercion\n        ```\n        :::\n        \n        ```{.r .cell-code}\n        y <- as.numeric(y)\n        y <- as.double(y)\n        ```\n        :::\n\n\n4.  자료구조 변환\n\n-   **as.data.frame() / as.matrix() / as.list() / as.vector()**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# as.data.frame(): 데이터프레임으로 변환\nx <- 1:6\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:6] 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\nx <- as.data.frame(x)\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t6 obs. of  1 variable:\n $ x: int  1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\n# as.list(): 리스트로 변환\nx <- as.list(x)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$x\n[1] 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 1\n $ x: int [1:6] 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\n# as.matrix(): 매트릭스로 변환 \nx <- 0:6\nx <- as.matrix(x)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]\n[1,]    0\n[2,]    1\n[3,]    2\n[4,]    3\n[5,]    4\n[6,]    5\n[7,]    6\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:7, 1] 0 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\n# as.vector(): 벡터로 변환 \nx <- as.vector(x)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 2 3 4 5 6\n```\n:::\n\n```{.r .cell-code}\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:7] 0 1 2 3 4 5 6\n```\n:::\n:::\n\n\n-   **as.factor() : factor --\\> int가 되면 숫자 1부터 시작(첫 번쨰 level)**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- as.factor(x)\n    x\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 0 1 2 3 4 5 6\n    Levels: 0 1 2 3 4 5 6\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    str(x)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n     Factor w/ 7 levels \"0\",\"1\",\"2\",\"3\",..: 1 2 3 4 5 6 7\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    x <- as.integer(x)\n    x\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 1 2 3 4 5 6 7\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    str(x)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n     int [1:7] 1 2 3 4 5 6 7\n    ```\n    :::\n    :::\n\n\n    **Example) 첫 번째 레벨인 C가 1/ 두 번쨰 레벨인 O가 2**\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    y <- c('C','C','O','C','O')\n    y\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"C\" \"C\" \"O\" \"C\" \"O\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    y <- as.factor(y)\n    y\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] C C O C O\n    Levels: C O\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    str(y)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n     Factor w/ 2 levels \"C\",\"O\": 1 1 2 1 2\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    y <- as.integer(y)\n    y\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 1 1 2 1 2\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    str(y)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n     int [1:5] 1 1 2 1 2\n    ```\n    :::\n    :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}