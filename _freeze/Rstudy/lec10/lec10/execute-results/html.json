{
  "hash": "eb5a77278d24b5fd1ab9e8b4433c3e52",
  "result": {
    "markdown": "---\ntitle: Lecture 10\ndate: '2023-01-10'\ndescription: 'array : dim(), array(), index'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n### 차례 \n\n1.  array 만들기\n\n-   dim( ), array( )\n\n2.  array index(인덱스)\n\n1.  **array만들기**\n\n**array : 행과 열, Page를 가지는 3차원 구조**\n\n**dim( ) \\<- c(행, 열, Page)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- 1:48\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n```\n:::\n\n```{.r .cell-code}\ndim(z) <- c(4,4,3)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\n, , 3\n\n     [,1] [,2] [,3] [,4]\n[1,]   33   37   41   45\n[2,]   34   38   42   46\n[3,]   35   39   43   47\n[4,]   36   40   44   48\n```\n:::\n\n```{.r .cell-code}\nclass(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"array\"\n```\n:::\n:::\n\n\n-   **array (data, dim)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- 1:48\narr <- array(z, c(4,4,3))\narr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\n, , 3\n\n     [,1] [,2] [,3] [,4]\n[1,]   33   37   41   45\n[2,]   34   38   42   46\n[3,]   35   39   43   47\n[4,]   36   40   44   48\n```\n:::\n:::\n\n\n2.  **array index**\n\n**array\\[행,열, page\\]**\n\n\n::: {.cell}\n\n```{.r .cell-code}\narr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n, , 2\n\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n\n, , 3\n\n     [,1] [,2] [,3] [,4]\n[1,]   33   37   41   45\n[2,]   34   38   42   46\n[3,]   35   39   43   47\n[4,]   36   40   44   48\n```\n:::\n\n```{.r .cell-code}\narr[1,1,1] # 1행 1열 1page 부분 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\narr[1,2,1] # 1행 2열 1page \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\narr[3,3,1] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n\n```{.r .cell-code}\narr[1,1,] # 1행 1열인 모든 page \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 17 33\n```\n:::\n\n```{.r .cell-code}\narr[2,2,] # 2행 2열인 모든 page\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  6 22 38\n```\n:::\n\n```{.r .cell-code}\narr[2,,1] # 2행 1page인 부분 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  6 10 14\n```\n:::\n\n```{.r .cell-code}\narr[3,,3] # 3행 3page인 부분\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 35 39 43 47\n```\n:::\n\n```{.r .cell-code}\narr[,,1] # 1page \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n```\n:::\n\n```{.r .cell-code}\narr[,,2] # 2page\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]   17   21   25   29\n[2,]   18   22   26   30\n[3,]   19   23   27   31\n[4,]   20   24   28   32\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}