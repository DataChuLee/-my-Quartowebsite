---
title: R tidyverse lec1   
date: '2023-01-20'
description: 'tidyverse intro & 맛보기'
category: 'dplyr'
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

### Tidyverse에 대하여

-   여러 데이터 분석에 유용한 패키지들의 모음집

-   공식적인 tidyverse의 시작은 2016년이다.

    -   이전부터 각각 구성원들이 따로 사용되고 있었다.

    -   ggplot2 패키지는 2005년에 만들어졌다.

### 핵심 구성 요소

```{r}
# install.packages('tidyverse')
library(tidyverse)
```

![](images/paste-9FE3AD1F.png)

-   ggplot2 : Data visualization

-   dplyr : data wrangling

-   readr : reading data

-   tibble : modern data frames

-   stringr : string manipulation

-   forcats : dealing with factors

-   tidyr : data tidying

-   purrr : functional programming

### 데이터 맛보기

서울시 생활이동 데이터

-   특정 시점에 서울 안에서 이동, 서울 외부에서 서울로 오고 간 이동\
    한 데이터

-   통근, 통학, 쇼핑, 여가 등 서울시의 행정수요를 유발하는 모든 이동을 의미한다.

-   2021 7월 (8시) 이동 데이터

-   자치구 코드 정보

```{r}
library(tidyverse)
moving_data <- read_csv('seoul_moving_202107_09_hr.csv')
reference_data <- readxl:: read_excel('reference.xlsx') 
```

### 데이터 파일 불러오기

-   `.csv` 파일의 경우 `read_csv()` 함수를 사용

-   `.xlsx 파일의 경우 read_xlsx() 함수를 사용`

    -   차이점은? --\> 파일 형태의 차이에 있다.

    -   `::` 의 의미 --\> 로딩 없이 패키지 안에 있는 함수를 사용하고 싶을 때 활용한다.\
        Ex) readxl 이라는 패키지 안에 함수 read_excel ( )을 로딩없이 사용하고 싶다.\
        그럴 때, `readxl :: read_excel() 와 같이 사용하면 된다.`

### 

### 데이터와 친해지기

1.  **기초 탐색(R 내장함수)**

-   dim( )

-   head( )

-   tail( )

2.  **tidyverse**

-   glimpse( )

### 데이터 변수 이름 바꾸기

변수 이름 설정 - 한글 코딩은 싫어요!!

```{r}
# reference_data 
origin_name_reference <- names(reference_data)
origin_name_reference # 한글로 된 변수이름

# 한글 변수들을 영어 변수로 바꿔준다. 
# janitor 패키지의 clean_names() 함수를 사용! 
reference_data %>% 
  janitor::clean_names() %>% 
  names()


# moving_data
origin_name_moving <- names(moving_data)
origin_name_moving

moving_data %>% 
  janitor::clean_names() %>% 
  names()

```

### `dplyr` 패키지(기본 동사 학습)

-   Single table 동사들

1.  행(row) 관련 동사들

    -   `distinct( )`

    -   `filter( )`

    -   `slice( )`

2.  열(column) 관련 동사들

    -   `select( )`

    -   `rename( )`

    -   `mutate( )`

    -   `relocate( )`

### 시도(sido) 단위는 몇 개인가?

중복 없는 표본들을 걸러준다.

-   `distinct( )`

    -   `.keep_all( ) = TRUE` 설정으로 딸려있는 데이터 보관하기

```{r}
reference_data <- reference_data %>% 
                      janitor::clean_names() 

# sido 변수안에 있는 data값들을 분리해서 보여준다.
reference_data %>% 
  distinct(sido) 

# 분리한 값들을 count
reference_data %>% 
  distinct(sido) %>% 
  count()

# '.keep_all = TRUE'의 설정으로 딸려있는 데이터도 같이 보여준다
reference_data %>% 
  distinct(sido, .keep_all = TRUE) %>% 
  dim()

```

### 원하는 행들을 걸러(filter)내는 방법

**사용 가능한 함수들**

-   연산자들

    -   `==, > , >=, &, |, !`

-   `유용한` 함수들

    -   `is.na( )`

    -   `between( ), near( )`

```{r}
moving_data %>% glimpse()

# 일요일에 운전을 한 여자
moving_data <- moving_data %>% 
  janitor::clean_names() %>% 
  filter(yoil == '일',
         seongbyeol == 'F') 

# 출발코드가 11010 이면서 도착코드가 11010인 data
moving_data %>% 
  filter(chulbal_sigungu_kodeu == 11010,
         dochag_sigungu_kodeu == 11010)

# 나이가 20~40대인 data
moving_data %>% 
  filter(between(nai, 20,40))

```

### 원하는 행들을 잘라내는 (slice)방법

기본 함수인 `head()` 의 확장버전

-   기본적으로 인덱싱을 제공

    -   맨 마지막 인덱스: `n()`

-   유용한 함수들

    -   `slice_max( ),slice_min( ),slice_sample(),slice_head(),slice_tail()`

```{r}
# 15~20번째 행들 추출
moving_data %>% 
  slice(15:20)

# 마지막 6개의 행들 추출 
moving_data %>% 
  slice_tail(n = 6)

# nai 변수가 숫자형이 아닌 문자형 데이터이므로, 데이터 변환 후
# nai 변수만 따로 가져와서, 나이 TOP 5 추출하기 
moving_data %>% 
  mutate(nai = as.numeric(nai)) %>%
  distinct(nai) %>% 
  slice_max(nai, n = 5)

```

### 내맘대로 행을 정렬(arrange) 하는 방법

-   정렬 기준 우선 순위 순서대로 설정

-   내림차순 : `desc()`

```{r}
moving_data %>% 
  select(dochagsigan,
         pyeong_gyun_idong_sigan_bun) %>% 
  arrange(dochagsigan, desc(pyeong_gyun_idong_sigan_bun))

```

### 원하는 열을 선택(select)하는 방법

**사용할 수 있는 옵션들**

-   사용가능 연산자들

    -   `: , ! , & , | , c( )` 사용

-   편리한 함수들

    -   `everything( ), last_col( )`

    -   `starts_with( ),ends_with( ),contains( )`

```{r}
# sido 변수를 1열에 배치해주고, 나머지는 순차적으로! 
reference_data %>% 
  select(sido, everything())  
  
# name 변수와 last col인 full_name 변수를 가져와줘!
reference_data %>% 
  select(name, last_col())
```

### 나만의 열을 생성(mutate)하는 방법

-   **new = old 문법**

`mutate(new = old_1 + old_2 …. + old_n)`

-   유용한 옵션

`.keep = c('all', 'used', 'unused', 'none' )`

-   궁합 좋은 함수들(심화공부`)`

    -   `case_when() , na_if(), coalesce(), if_else()`

-   년도 정도만 뺴내오기

```{r}
library(stringr)
moving_data %>% glimpse()
moving_data %<>% 
  mutate(year = str_sub(daesang_yeon_wol, 1,4),
         year = as.integer(year)) %>% 
  select(year, everything()) 
```

-   분(min)을 시간(hr)으로 변환

```{r}
moving_data %>% glimpse()
moving_data %>% 
  mutate(idong_sigan_hr = pyeong_gyun_idong_sigan_bun / 60) %>%
  select(idong_sigan_hr, everything())

```

-   시도 정보만 빼내오기(ex. 서울특별시, 부산광역시...)

```{r}
reference_data %>% glimpse()
reference_data %>% 
  mutate(sido_name =str_split_fixed(full_name,
                                    pattern = " ",2)[,1]) %>% 
  select(sido_name) %>% 
  distinct()
```

### 열 이름 다시 정하기(rename)

`df %>% rename(new = old)`

`df %>% rename_with(function)`

-   A을 a_new로 바꾸기

```{r}
# df %>% rename(a_new = A) 
```

-   모든 열이름 대문자로 바꾸기

```{r}
# df %>% rename_with(toupper)
```

-   실습하기

```{r}
moving_data %>% 
  rename(avg_time_min= pyeong_gyun_idong_sigan_bun,
         ppl_sum = idong_ingu_hab) %>% 
  select(avg_time_min, ppl_sum)
```

### 열의 위치를 재배치(relocate) 하는 방법

-   열의 위치를 앞으로 땅김

```{r}
# df %>% relocate(col)
# df %>% select(col, everything())
```

-   특정 위치로 옮길떄

    -   `.before , .after` 옵션

    -   `last_col()`함수

-   변수 타입으로 정렬가능

    -   `where(is.character)` 사용

-   실습하기

```{r}
# 이동 인구 합 앞으로
moving_data %>% 
  relocate(idong_ingu_hab)

# 문자열 타입 앞으로
moving_data %>% 
  relocate(where(is.character))
```
