---
title: R tidyverse lec4
date: '2023-01-26'
description: '그래프를 그리는데에도 문법이 존재한다고?'
categories: 'ggplot2'
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

### Grammer of Graphics `ggplot2`

![](images/paste-44AD5DC2.png)

### The Grammar of Graphics

-   그래프를 우리가 직관적인 언어의 문법을 이해하듯 바라보자.

    -   나는 이 세상에서 `가난하고 외롭고 쓸쓸하니 살아가도록` 태어났다.

-   우리가 일상생활 속에서 사용하는 문장들은 각각의 문법 요소들로 구성되어있다.

-   한 문장을 바라볼 때, 자연스럽게 의미를 띄는 부분들로 이해한다.

-   그래프를 만들 때에도 그래프를 여러 요소들로 쪼개어 그리자!

### palmerpenguins 데이터

R에서 가장 유명한 펭귄들!

```{r}
# devtools::install_github("allisonhorst/parmerpenguins")
library(palmerpenguins)
```

-   기초 입문 데이터에서 가장 유명했던 붓꽃(`iris`) 데이터셋의 후계자이다.

    -   붓꽃 데이터가 너무 쉬워졌다.

    -   기초적인 데이터 핸들링과 시각화에 좋은 데이터를 만들어보자!

![](images/paste-AEBF068F.png)

### 펭귄 데이터는 무엇을 담고 있나??

**Deep dive into 펭귄 데이터**

펭귄의 종류별 부리 길이 측정

-   펭귄 종류

    -   Chinstrap, Gentoo, Adelie

-   펭귄의 서식지

-   부리길이, 부리깊이, 날개길이

    -   측정단위: `mm`

    -   flipper : penguin\`s wing

-   성별 및 몸무게 정보

![](images/paste-A5B21184.png)

### 펭귄 데이터 구조 살펴보기

**주요정보**

-   344개의 표본

-   **NA 가 섞여있다.**

-   8개의 변수가 존재

```{r}
library(tidyverse)
penguins %>% glimpse()

# Count NA 
t(map_df(penguins, ~sum(is.na(.))))

# NA 제거 
plot_data <- penguins %>% 
    drop_na()

# Count NA 
t(map_df(plot_data, ~sum(is.na(.))))
count_data <- plot_data %>% 
    group_by(species) %>% 
    tally()
```

### 

### Addins 부분 중 'ggplot2 builder' 를 이용한 시각화

ggplot2 builder를 활용하면 단순히 코드로 시각화하는 것보다 수월하게 할 수 있다.

```{r}
ggplot(count_data) +
    aes(x = species, fill = species, weight = n) +
    geom_bar() +
    scale_fill_manual(
        values = c(Adelie = "#000004",
                   Chinstrap = "#B63778",
                   Gentoo = "#FCFDBF")
    ) +
    labs(
        x = "펭귄 종류 ",
        y = "개체 수(단위: 마리)",
        title = "펭귄 종별 개체수",
        fill = "펭귄 종류"
    ) +
    theme_bw() +
    theme(legend.position = "bottom")
```

```{r}
# Recoding count_data$species
count_data$species <- count_data$species %>%
  fct_recode(
    "아델리 펭귄" = "Adelie",
    "친스트랩 펭귄" = "Chinstrap",
    "겐투 펭귄" = "Gentoo"
  )
# factor level 재조정 (Count에 따라서)
count_data$species <- fct_reorder(count_data$species,
                                  count_data$n)

ggplot(count_data) +
    aes(x = species, fill = species, weight = n) +
    geom_bar() +
    scale_fill_manual(
        values = c("아델리 펭귄" = "#000004",
                   "친스트랩 펭귄" = "#B63778",
                   "겐투 펭귄" = "#FCFDBF")
    ) +
    labs(
        x = "펭귄 종류 ",
        y = "개체 수(단위: 마리)",
        title = "펭귄 종별 개체수",
        fill = "펭귄 종류"
    ) +
    theme_bw() +
    theme(legend.position = "bottom")

```

### ggplot2 builder 를 이용한 시각화2

```{r}
ggplot(plot_data) +
    aes(
        x = bill_length_mm,
        y = bill_depth_mm,
        colour = species,
        size = body_mass_g
    ) +
    geom_point(shape = "circle") +
    scale_color_viridis_d(option = "plasma", direction = 1) +
    labs(
        x = "부리 길이(단위:mm)",
        y = "부리 깊이(단위:mm)",
        title = "팔머펭귄 종별 부리길이 vs 깊이",
        color = "펭귄 종류",
        size = "몸무게"
    ) +
    ggthemes::theme_economist() +
    theme(legend.position = "bottom") 
```

### 그래프를 구성하는 여러 레이어들

-   x축과 y축을 이어주는 레이어

    -   `aes()`

-   그래프의 요소들을 설정하는 레이어

    -   `geom_bar, geom_point`

-   그래프의 색깔을 설정하는 레이어

    -   `scale_color_manual()`

-   그래프의 테마를 설정하는 레이어

    -   `ggthemes::theme_fivethirtyeight()`

-   범례의 위치를 설정하는 레이어

    -   `theme(legend.position = "bottom")`

### 1. 도화지 준비 단계

**그래프의 밑바닥 준비**

정보의 원천이 되는 자료를 등록하는 단계이다.

-   `ggplot()` 은 입력되는 자료가 data.frame 혹은 tibble의 형태를 띄고\
    있어야한다.

-   자료는 무조건 사각형 `tidy` 형태

    -   변수를 나타내는 열

    -   표본을 나타내는 행

```{r}
ggplot(data = plot_data)
```

### 2. aesthetics 레이어

**그래프의 속성을 데이터의 정보와 연결하는 레이어**

-   `aesthetics` 에서 설정하는 요소들

    -   x,y: x와 y축

    -   alpha: 투명도

    -   color, fill : 색깔과 채우기 속성

    -   shape, size : 모양과 사이즈

    -   etc..

-   데이터의 **정보**와 **요소**들을 이어준다는 것을 명심해야한다!

    -   X축과 Y축이 데이터 정보와 연결된다.

```{r}
ggplot(data = plot_data) + 
    aes(x = bill_length_mm,
             y = bill_depth_mm)
```

### 3. Geometric objects 레이어(geom\_\~)

**그래프의 메인요소**

어떠한 기하학적인 요소를 사용하여 정보를 표현할 것인가?

-   선,면,공간

-   삼각형, 사각형, 다각형, 원 등

**ggplot2 패키지의 함수들**

-   `geom_<종류들>`

    -   `geom_point()`

    -   `geom_path()`

    -   `geom_bar()`

    -   `geom_contour()`

![](images/paste-2D8DD6C6.png)

```{r}
ggplot(data = plot_data) + 
    aes(x = bill_length_mm,
        y = bill_depth_mm) + 
    geom_point(
        aes(color = as_factor(species),
            size = (body_mass_g / 1000),
            alpha = 0.7))
```

-   앞에서 그린 산점도의 경우\
    `geom_point()`를 사용

-   레이어별 특정 aesthetic을 연결해서 그리는 것이 가능하다

### 4. `aes() + geom() 콤보`

**상황에 맞게 선택하자**

-   방법1 = 데이터 1개, 맵핑 1개

-   방법2 = 데이터 1개, 맵핑 여러개

-   방법3 = 데이터 여러 개, 맵핑 여러 개

![](images/paste-20AD27EF.png)

### 5. scales 레이어 - y 축 설정

함수이름구조 : scale\_\<aes\>\_\<type\>()

-   Change Label, Breaks, Limits, etc

-   `scale_y_continuous()`

    -   연속형 Y축 변수 관련 속성을 확정

    -   `minor_breaks = NULL`

```{r}
ggplot(data = plot_data) + 
    aes(x = bill_length_mm,
        y = bill_depth_mm) + 
    geom_point(
        aes(color = as_factor(species),
            size = (body_mass_g / 1000),
            alpha = 0.7)) +
    scale_y_continuous(
        breaks = seq(0, 30, by = 2),
        labels = paste(seq(0, 30, by = 2), "mm"),
        minor_breaks = NULL
    )  

```

### 6. scales 레이어 - x 축 설정

**위에서 했던 y축과 동일한 방식으로 하면 된다.**

```{r}
p <- ggplot(data = plot_data) + 
    aes(x = bill_length_mm,
        y = bill_depth_mm) + 
    geom_point(
        aes(color = as_factor(species),
            size = (body_mass_g / 1000),
            alpha = 0.7)) +
    scale_y_continuous(
        breaks = seq(0, 30, by = 2),
        labels = paste(seq(0, 30, by = 2), "mm"),
        minor_breaks = NULL
    )  +
    scale_x_continuous(
        breaks = seq(30, 60, by = 10),
        labels = paste(seq(30, 60, by = 10), "mm"),
        minor_breaks = NULL
    )
p
```

### 7. scale\_\<aes\>\_identity() 함수

-   설정\<속성\> 확정 함수

    -   투명도(`alpha`) 0.7로 설정되었으나 실제로 70%로 적용 안됨

    -   점 크기 (`size`) 역시 `identity()` 함수를 통해서 확정

-   적용 후 관련 범례가 사라졌다.

```{r}
p <- p + 
    scale_alpha_identity() + # alpha의 속성을 확정시키는 함수 
    scale_size_identity() 
p
```

### 8. scales 레이어 - color 설정

**사용가능한 palette**

-   ESQUISSE ggplot 빌더에서 확인!

```{r}
p <-  p +
  scale_color_brewer(
        palette = "Set1",
        labels = c("Adele 펭귄",
                   "Chintrap 펭귄",
                   "Gentoo 펭귄"))
p
```

### 9. 범례 설정

**범례 이름은 `guide_legend()` 를 사용**

```{r}
p <- p +
  guides(color = guide_legend(
            title = "펭귄종류",
            ncol = 3)) +
    theme(legend.position = "bottom") # 범례의 위치 선정! 
p
```

### 

### 10. facet 레이어를 통한 변수별 그래프

**facet : a particular aspect of feature of something**

-   어떤 것의 여러 면 (특히 보석)

-   데이터 안의 특정 변수를 사용하여 여러 개의 데이터 특성을 나타낼 때 유용하다

-   하나의 변수로 펼칠 때

    -   `facet_wrap()`

-   2개의 변수 조합으로 펼칠 때

    -   `facet_grid()`

```{r}
# 각 서식지별 펭귄 종류 분석
# facet으로 펼칠 변수를 vars() 함수로 감싸서 넣어준다. 
p <- p +
  facet_wrap(vars(island))

p     

# 각 서식지별, 성별 펭귄 종류 분석
# facet_grid()는 두 변수를 사용하여 데이터의 특성을 보여준다.
p <-  p +
  facet_grid(sex ~ island)
p
```

### 11. 제목, 부제목, 캡션 넣기

-   `labs()` 함수를 사용한 제목 설정

    -   X,Y축 제목도 설정 가능하다.

    -   `x = "x축 제목"`

```{r}
p <-p +
  labs(
        title = "팔머펭귄 시각화",
        subtitle = "종별 부리길이 vs. 부리깊이",
        caption = "",
        x ="부리길이 (단위:mm)",
        y ="부리깊이 (단위:mm)"
    )
p
```

### 12. ggrepel 패키지 - 조건부 레이블링

```{r}
mypoints <- plot_data %>% 
    group_by(species) %>% 
    slice_max(bill_length_mm, n =3)

p <- p + 
  ggrepel::geom_label_repel(
          data = mypoints,
          aes(x = bill_length_mm,
              y = bill_depth_mm,
              label = paste("(",bill_length_mm,
                          ", ", bill_depth_mm,")")),
          color = "black", size = 2) + 
          coord_fixed(ratio = 3)
p    
```

### 13. 비율 조정과 테마 적용

```{r}
# https://github.com/Mikata-Project/ggthemr
# remotes::install_github('Mikata-Project/ggthemr')

remotes::install_github('Mikata-Project/ggthemr')
library(ggthemr)
ggthemr_reset() # 테마 리셋! 
ggthemr('flat') # 테마 적용! 
p + coord_fixed() # x,y축 비율 조정! 
```
