{
  "hash": "f6b79f352a810f6f2facf4d519954463",
  "result": {
    "markdown": "---\ntitle: Lecture 2 \nsubtitle: 범주형 변수(명목형, 순서형), 연속형 변수\n---\n\n\n1.  범주형 변수\n\n    Factor는 제한된 수의 다른 값들을 저장하는 변수입니다. 이런 변수들을 범주형 변수(categorical variable)라고 부릅니다.\n\n    데이터 셋에는 두 가지 유형의 자료가 있습니다.\n\n    -   categorical(범주형)\n\n        -   값이 제한되고, 특정 유한한 그룹을 기반으로 함 \n\n        -   ex) 나라, 연도, 성별, 직업 등\n\n    -   continuous(연속형)\n\n        -   정수(integer)부터 십진수(decimal)까지 모든 값을 가질 수 있음\n\n        -   ex) 수익, 주가 등\n\n    -   R은 범주형 변수를 factor에 저장합니다. 아래는 문자 변수를 factor 변수로 변환하는 코드입니다.\n\n    <!-- -->\n\n        ``` r\n        factor(x = character(), levels, labels = levels, ordered = is.ordered(x))\n        ```\n\n        * parameter(파라미터)\n\n            -   x: 데이터 벡터, 문자열이나 정수형만 가능\n\n            -   level: x가 가질 수 있는 값들, optional, 기본 값은 x의 고유한 목록\n\n            -   label: x에 레이블을 추가, ex) 1: 남성, 2: 여성\n\n            -   ordered: level 정렬 여부\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex5 <- c(2,1,3,2,1) # 임의의 숫자형 벡터 생성\nex5 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 1 3 2 1\n```\n:::\n\n```{.r .cell-code}\n# 숫자형 벡터를 factor로 전환 \ncat5 <- factor(ex5,labels = c(\"apple\",\"pie\",\"jam\")) \ncat5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] pie   apple jam   pie   apple\nLevels: apple pie jam\n```\n:::\n:::\n\n\n머신러닝을 수행할 때 문자열을 factor로 전환하는 작업은 매우 중요합니다.\n\n범주형 변수는 명목형과 순서형 변수로 나뉩니다.\n\n2.  명목형 변수(Nominal Categorical Variable)\n\n    범주형 변수를 선언할 때 순서가 중요하지 않은 경우 사용합니다. 예를 들어 성별, 색상, 등은 순서가 중요하지 않으므로 명목형 변수로 선언합니다.\n\n    Example\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # 색을 담을 벡터 생성\n    color_vector = c(\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"purple\")\n    \n    # 출력\n    color_vector\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"red\"    \"orange\" \"yellow\" \"green\"  \"blue\"   \"indigo\" \"purple\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    # factor로 변환\n    color_factor = factor(color_vector)\n    # 확인\n    color_factor\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] red    orange yellow green  blue   indigo purple\n    Levels: blue green indigo orange purple red yellow\n    ```\n    :::\n    :::\n\n\n    3.  순서형 변수\n\n        순서형 변수는 본연의 순서를 가지며, order 파라미터를 통해 순서를 지정할 수 있습니다.\n\n    example\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # 요일 벡터 생성\n    day_vector = c('tuesday', 'monday', 'wednesday', 'friday', 'saturday', 'thursday', 'sunday')\n    day_vector\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"tuesday\"   \"monday\"    \"wednesday\" \"friday\"    \"saturday\"  \"thursday\" \n    [7] \"sunday\"   \n    ```\n    :::\n    \n    ```{.r .cell-code}\n    # 순서가 있는 factor로 변환\n    day_factor = factor(day_vector, order = TRUE, levels = c('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'))\n    day_factor\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] tuesday   monday    wednesday friday    saturday  thursday  sunday   \n    7 Levels: monday < tuesday < wednesday < thursday < friday < ... < sunday\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    # 레벨별 갯수 계산\n    summary(day_factor)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n       monday   tuesday wednesday  thursday    friday  saturday    sunday \n            1         1         1         1         1         1         1 \n    ```\n    :::\n    :::\n\n\n    4.  연속형 변수\n\n        연속형 변수는 R에서 기본으로 제공하는 함수입니다. 숫자 또는 정수로 저장됩니다.\n\n        mtcar data는 내장 데이터 셋으로 유형별 자동차의 정보를 담고 있습니다.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    mtcars\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n                         mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n    Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n    Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n    Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n    Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n    Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n    Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n    Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n    Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n    Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n    Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n    Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n    Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n    Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n    Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n    Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n    Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n    Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n    Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n    Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n    Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n    Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n    Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n    AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n    Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n    Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n    Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n    Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n    Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n    Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n    Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n    Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n    Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n    ```\n    :::\n    :::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}